}))
}
} else {
post.h<-NULL
}
results$p.value[[i]]<-p.values
results$post.hoc[[i]]<-post.h
}
i
model<-tryCatch(aov(as.formula(paste("data[,",i,"]~",formula,sep="")),data=tmp.data), error=function(e){NULL})
# summary(aov(data[,1] ~Error(cyl) , data = tmp.data))
#     model <- aov(data[,1]~time, data = tmp.data)
#     model <- aov(data[,2]~time + Error(subject/time), data=tmp.data)
#get p-values
if(!is.null(repeated)){
names<-attr(model$`(Intercept)`$terms,'term.labels')
p.values<-data.frame(t(summary(model[[3]])[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
} else {
names<-attr(model$terms,'term.labels')
p.values<-data.frame(t(summary(model)[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
}
post.hoc
!colnames(meta.data)
tmp<-meta.data[,!colnames(meta.data)%in%repeated]
tmp.m<-cbind(tmp,join.columns(tmp,":"))
join.columns
tmp
cbind(tmp,join.columns(tmp,":"))
shiny::runApp()
meta.data
j = 1
t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method=p.adjust)$p.value)
?pairwise.t.test
pairwise.t.test(Ozone, Month)
attach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
pairwise.t.test(Ozone, Month)
?join.columns
?join.columns
join.columns
join.column(data[,2:3])
colnames(meta.data)
model <- aov(data[,1]~time, data = tmp.data)
tmp2<-tryCatch(TukeyHSD(model),error=function(e){NA})
post.h<-do.call("cbind",lapply(1:length(tmp2),function(j){
obj<-t(tmp2[[j]][,4,drop=FALSE])
rownames(obj)<-colnames(data)[i]
obj
obj
}))
tmp2<-tryCatch(TukeyHSD(model),error=function(e){NA})
post.h<-do.call("cbind",lapply(1:length(tmp2),function(j){
obj<-t(tmp2[[j]][,4,drop=FALSE])
rownames(obj)<-colnames(data)[i]
obj
}))
model
tmp2
TukeyHSD(model)
model
?TukeyHSD
summary(fm1 <- aov(breaks ~ wool + tension, data = warpbreaks))
TukeyHSD(fm1, "tension", ordered = TRUE)
p.values
model <- aov(data[,1]~time, data = tmp.data)
model
TukeyHSD(model)
TukeyHSD(fm1, "tension", ordered = TRUE)
TukeyHSD(fm1)
shiny::runApp()
results
results$p.value[[1]]
results$p.value[[1]] = c(1,2)
results
results$p.value[[2]] = c(3,5)
results
ncol(data)
do.call("rbind",results$post.hoc)
?pairwise.t.test
attach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
pairwise.t.test(Ozone, Month)
obj<-t(pairwise.t.test(Ozone,Month,p.adjust.method = "FDR")$p.value)
obj<-t(pairwise.t.test(Ozone,Month,p.adjust.method = "fdr")$p.value)
obj
if(ncol(obj)==1)
ncol(obj)==1
dias = F
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
names
obj2
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
names
data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
matrix(obj[upper.tri(obj,diag=diag)],1)
upper.tri(obj,diag=diag)]
upper.tri(obj,diag=diag)
diag
diag
diag = F
data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
obj
obj
Month
tmp.data
tmp.m <- tmp.data[,repeated,drop = F]
tmp.m
obj<-t(pairwise.t.test(data[,i], tmp.m,p.adjust.method=p.adjust)$p.value)
data[,i]
tmp.m
t(pairwise.t.test(data[,i], tmp.m,p.adjust.method=p.adjust)$p.value)
Ozone
Month
obj<-t(pairwise.t.test(data[,i], as.factor(tmp.m),p.adjust.method=p.adjust)$p.value)
sort(tmp.m)
class(tmp.m)
tmp.m
obj<-t(pairwise.t.test(data[,i], tmp.m[,1],p.adjust.method="bonf")$p.value)
diag <- if(ncol(obj)==1) TRUE else FALSE
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
tmp.m <- tmp.data[,repeated,drop = F]
post.h<-do.call("cbind",lapply(1:ncol(tmp.m),function(j){
obj<-t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
diag <- if(ncol(obj)==1) TRUE else FALSE
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
}))
post.h
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tmp.m
data = read.csv("C:\\Users\\Sili Fan\\Desktop\\statistics courses\\Statistical analysis datasets\\mx 69088 C\\mx 69088 time.csv")
test.data = data
test.data = data[,3:10]
formula = "time"
factor = data[,2]
factor = data[,2,drop  =F]
post.hoc = T
repeated  = "time"
FDR = "BH"
data=test.data
formula
meta.data=factor
post.hoc
repeated
FDR
if(!is.null(repeated)) {
formula<-paste0(formula,' + Error(subject/',repeated,')')
subject <- as.character(meta.data[,repeated])
for(i in unique(meta.data[,repeated])){
subject[meta.data[,repeated]%in%i] = 1:sum(meta.data[,repeated]%in%i)
}
data2<-cbind(subject = subject, data)
}
i =1
tmp.data<-cbind(meta.data,data) # bind with data for easy scoping
if(!is.null(repeated)){
tmp.data<-cbind(meta.data,data2) # bind with data for easy scoping
}
results<-list(p.value=vector("list",ncol(data)),post.hoc=vector("list",ncol(data)))
model<-tryCatch(aov(as.formula(paste("data[,",i,"]~",formula,sep="")),data=tmp.data), error=function(e){NULL})
# summary(aov(data[,1] ~Error(cyl) , data = tmp.data))
#     model <- aov(data[,1]~time, data = tmp.data)
#     model <- aov(data[,2]~time + Error(subject/time), data=tmp.data)
#get p-values
if(!is.null(repeated)){
names<-attr(model$`(Intercept)`$terms,'term.labels')
p.values<-data.frame(t(summary(model[[3]])[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
} else {
names<-attr(model$terms,'term.labels')
p.values<-data.frame(t(summary(model)[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
}
post.hoc
tmp.m <- tmp.data[,repeated,drop = F]
do.call("cbind",lapply(1:ncol(tmp.m),function(j){
obj<-t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
diag <- if(ncol(obj)==1) TRUE else FALSE
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
}))
t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
j = 1
t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
ncol(obj)
obj<-t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
ncol(obj)
matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
diag <- if(ncol(obj)==1) TRUE else FALSE
data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
data.frame(matrix(obj[upper.tri(obj,diag=T)],1))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=T)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
obj2
matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=T)],1))
colnames(obj2)<-names[upper.tri(names,diag=T)]
rownames(obj2)<-colnames(data)[i]
obj2
# tmp.m<-cbind(tmp,join.columns(tmp,":"))
tmp.m <- tmp.data[,repeated,drop = F]
post.h<-do.call("cbind",lapply(1:ncol(tmp.m),function(j){
obj<-t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
# diag <- if(ncol(obj)==1) TRUE else T
diag =T
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
}))
post.h
shiny::runApp()
shiny::runApp()
obj2
p.values
for(i in 1:ncol(data)){
model<-tryCatch(aov(as.formula(paste("data[,",i,"]~",formula,sep="")),data=tmp.data), error=function(e){NULL})
# summary(aov(data[,1] ~Error(cyl) , data = tmp.data))
#     model <- aov(data[,1]~time, data = tmp.data)
#     model <- aov(data[,2]~time + Error(subject/time), data=tmp.data)
#get p-values
if(!is.null(repeated)){
names<-attr(model$`(Intercept)`$terms,'term.labels')
p.values<-data.frame(t(summary(model[[3]])[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
} else {
names<-attr(model$terms,'term.labels')
p.values<-data.frame(t(summary(model)[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
}
#pairwise t-tests (repeated) or TukeyHSD
if(post.hoc){
if(!is.null(repeated)){
# tmp<-meta.data[,!colnames(meta.data)%in%repeated]
# tmp.m<-cbind(tmp,join.columns(tmp,":"))
tmp.m <- tmp.data[,repeated,drop = F]
post.h<-do.call("cbind",lapply(1:ncol(tmp.m),function(j){
obj<-t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
# diag <- if(ncol(obj)==1) TRUE else T
diag =T
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
}))
} else {
tmp2<-tryCatch(TukeyHSD(model),error=function(e){NA})
post.h<-do.call("cbind",lapply(1:length(tmp2),function(j){
obj<-t(tmp2[[j]][,4,drop=FALSE])
rownames(obj)<-colnames(data)[i]
obj
}))
}
} else {
post.h<-NULL
}
results$p.value[[i]]<-p.values
results$post.hoc[[i]]<-post.h
}
do.call("rbind",results$p.value)
tmp<-do.call("rbind",results$p.value)
FDR.p<-sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR))
colnames(FDR.p)<-colnames(tmp)
p.vals<-data.frame(p.values=tmp,FDR.p.values=FDR.p)
list(p.values=p.vals,post.hoc=do.call("rbind",results$post.hoc))
p.vals
data.frame(p.values=tmp,FDR.p.values=FDR.p)
FDR.p
p.vals
data.frame(p.values=tmp,FDR.p.values=FDR.p)
p.vals<-data.frame(p.values=tmp,FDR.p.values=FDR.p)
colnames(p.vals)
FDR.p
tmp
as.numeric(tmp)
unlist(tmp)
class(unlist(tmp))
p.vals<-data.frame(p.values=unlist(tmp),FDR.p.values=unlist(FDR.p))
p.vals
unlist(FDR.p)
as.vector(tmp)
tmp
unlist(FDR.p)
as.vector(unlist(tmp))
as.vector(unlist(FDR.p))
p.vals<-data.frame(p.values=as.vector(unlist(tmp)),FDR.p.values=as.vector(unlist(FDR.p)))
p.vals
tmp<-do.call("rbind",results$p.value)
FDR.p<-sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR))
colnames(FDR.p)<-colnames(tmp)
p.vals<-data.frame(p.values=as.vector(unlist(tmp)),FDR.p.values=as.vector(unlist(FDR.p)))
list(p.values=p.vals,post.hoc=do.call("rbind",results$post.hoc))
shiny::runApp()
list(p.values=p.vals,post.hoc=do.call("rbind",results$post.hoc))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data = read.csv("C:\\Users\\Sili Fan\\Desktop\\statistics courses\\Statistical analysis datasets\\mx 131933 A\\mx 131933 species treatment.csv")
View(data[1:10,1:10])
test.data = data[1:10,1:10]
test.data = data[1:10,1:10,drop = F]
View(data[1:10,1:10])
factor <- data[,2:3,drop = F]
formula<-paste(colnames(factor),collapse="+")
formula
test.data
formula
factor
post.hoc = T
repeated
repeated<- NULL
FDR = "fdr"
data=test.data
formula
meta.data=factor
post.hoc
repeated
FDR
!is.null(repeated)
tmp.data<-cbind(meta.data,data) # bind with data for easy scoping
meta.data
dim(meta.data)
data
dim(data)
data = read.csv("C:\\Users\\Sili Fan\\Desktop\\statistics courses\\Statistical analysis datasets\\mx 131933 A\\mx 131933 species treatment.csv")
data = data[,4:10]
tmp.data<-cbind(meta.data,data) # bind with data for easy scoping
!is.null(repeated)
results<-list(p.value=vector("list",ncol(data)),post.hoc=vector("list",ncol(data)))
ncol(data)
for(i in 1:ncol(data)){
model<-tryCatch(aov(as.formula(paste("data[,",i,"]~",formula,sep="")),data=tmp.data), error=function(e){NULL})
# summary(aov(data[,1] ~Error(cyl) , data = tmp.data))
#     model <- aov(data[,1]~time, data = tmp.data)
#     model <- aov(data[,2]~time + Error(subject/time), data=tmp.data)
#get p-values
if(!is.null(repeated)){
names<-attr(model$`(Intercept)`$terms,'term.labels')
p.values<-data.frame(t(summary(model[[3]])[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
} else {
names<-attr(model$terms,'term.labels')
p.values<-data.frame(t(summary(model)[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
}
#pairwise t-tests (repeated) or TukeyHSD
if(post.hoc){
if(!is.null(repeated)){
# tmp<-meta.data[,!colnames(meta.data)%in%repeated]
# tmp.m<-cbind(tmp,join.columns(tmp,":"))
tmp.m <- tmp.data[,repeated,drop = F]
post.h<-do.call("cbind",lapply(1:ncol(tmp.m),function(j){
obj<-t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
# diag <- if(ncol(obj)==1) TRUE else T
diag =T
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
}))
} else {
tmp2<-tryCatch(TukeyHSD(model),error=function(e){NA})
post.h<-do.call("cbind",lapply(1:length(tmp2),function(j){
obj<-t(tmp2[[j]][,4,drop=FALSE])
rownames(obj)<-colnames(data)[i]
obj
}))
}
} else {
post.h<-NULL
}
results$p.value[[i]]<-p.values
results$post.hoc[[i]]<-post.h
}
tmp<-do.call("rbind",results$p.value)
tmp
FDR.p<-sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR))
FDR.p
colnames(FDR.p)<-colnames(tmp)
colnames
FDR.p
FDR.p<-sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR))
FDR.p
FDR.p<-data.frame(sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR)))
FDR.p
colnames(FDR.p)<-colnames(tmp)
colnames
FDR.p
p.vals<-data.frame(p.values=as.vector(unlist(tmp)),FDR.p.values=as.vector(unlist(FDR.p)))
p.vals
tmp
FDR.p<-data.frame(sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR)))
FDR.p
colnames(FDR.p)<-colnames(tmp)
p.vals<-data.frame(p.values=as.vector(unlist(tmp)),FDR.p.values=as.vector(unlist(FDR.p)))
p.vals
tmp<-do.call("rbind",results$p.value)
tmp
FDR.p
colnames(FDR.p)<-colnames(tmp)
p.vals<-data.frame(p.values=as.vector(unlist(tmp)),FDR.p.values=as.vector(unlist(FDR.p)))
p.vals
list(p.values=p.vals,post.hoc=do.call("rbind",results$post.hoc))
tmp<-do.call("rbind",results$p.value)
FDR.p<-data.frame(sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR)))
colnames(FDR.p)<-colnames(tmp)
FDR.p
unlist(tmp)
tmp
p.vals<-data.frame(p.values=tmp,FDR.p.values=FDR.p)
p.vals
list(p.values=p.vals,post.hoc=do.call("rbind",results$post.hoc))
formula<-paste(colnames(factor),collapse="*")
formula
if(!is.null(repeated)) {
formula<-paste0(formula,' + Error(subject/',repeated,')')
subject <- as.character(meta.data[,repeated])
for(i in unique(meta.data[,repeated])){
subject[meta.data[,repeated]%in%i] = 1:sum(meta.data[,repeated]%in%i)
}
data2<-cbind(subject = subject, data)
}
tmp.data<-cbind(meta.data,data) # bind with data for easy scoping
if(!is.null(repeated)){
tmp.data<-cbind(meta.data,data2) # bind with data for easy scoping
}
results<-list(p.value=vector("list",ncol(data)),post.hoc=vector("list",ncol(data)))
for(i in 1:ncol(data)){
model<-tryCatch(aov(as.formula(paste("data[,",i,"]~",formula,sep="")),data=tmp.data), error=function(e){NULL})
# summary(aov(data[,1] ~Error(cyl) , data = tmp.data))
#     model <- aov(data[,1]~time, data = tmp.data)
#     model <- aov(data[,2]~time + Error(subject/time), data=tmp.data)
#get p-values
if(!is.null(repeated)){
names<-attr(model$`(Intercept)`$terms,'term.labels')
p.values<-data.frame(t(summary(model[[3]])[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
} else {
names<-attr(model$terms,'term.labels')
p.values<-data.frame(t(summary(model)[[1]][1:length(names),5,drop=FALSE]))
dimnames(p.values)<-list(colnames(data)[i],names)
}
#pairwise t-tests (repeated) or TukeyHSD
if(post.hoc){
if(!is.null(repeated)){
# tmp<-meta.data[,!colnames(meta.data)%in%repeated]
# tmp.m<-cbind(tmp,join.columns(tmp,":"))
tmp.m <- tmp.data[,repeated,drop = F]
post.h<-do.call("cbind",lapply(1:ncol(tmp.m),function(j){
obj<-t(pairwise.t.test(data[,i], tmp.m[,j],p.adjust.method="bonf")$p.value)
# diag <- if(ncol(obj)==1) TRUE else T
diag =T
names<-matrix(apply(expand.grid(rownames(obj),colnames(obj)),1,paste,collapse="-"),nrow(obj),ncol(obj))
obj2<-data.frame(matrix(obj[upper.tri(obj,diag=diag)],1))
colnames(obj2)<-names[upper.tri(names,diag=diag)]
rownames(obj2)<-colnames(data)[i]
obj2
}))
} else {
tmp2<-tryCatch(TukeyHSD(model),error=function(e){NA})
post.h<-do.call("cbind",lapply(1:length(tmp2),function(j){
obj<-t(tmp2[[j]][,4,drop=FALSE])
rownames(obj)<-colnames(data)[i]
obj
}))
}
} else {
post.h<-NULL
}
results$p.value[[i]]<-p.values
results$post.hoc[[i]]<-post.h
}
tmp<-do.call("rbind",results$p.value)
FDR.p<-data.frame(sapply(1:ncol(tmp), function(i) p.adjust(tmp[,i],method=FDR)))
colnames(FDR.p)<-colnames(tmp)
p.vals<-data.frame(p.values=tmp,FDR.p.values=FDR.p)
p.vals
list(p.values=p.vals,post.hoc=do.call("rbind",results$post.hoc))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
